<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.light.community.dao.MessageMapper"><!--填写user-mapper的全限定类名-->

    <!--提取查询字段-->
    <sql id="selectFields">
        id,from_id,to_id,conversation_id,content,status,create_time
    </sql>


    <!--提取插入字段-->
    <sql id="insertFields">
        from_id,to_id,conversation_id,content,status,create_time
    </sql>

    <!-- //查询当前用户的会话列表，针对每个会话列表只返回最新的一条私信（支持分页 -->
    <!-- List<Message> selectConversations(int userId,int offset,int limit); -->
    <select id="selectConversations" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where id in(
            select max(id) from message
            where status !=2
            and from_id !=1
            and (from_id=#{userId} or to_id=#{userId})
            group by conversation_id
        )
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <!-- //查询当前用户的会话数量 -->
    <!-- int selectConversationCount(int userId); -->
    <select id="selectConversationCount" resultType="int">
        select count(m.maxid) from (
            select max(id) as maxid from message
            where status !=2
            and from_id!=1
            and (from_id=#{userId} or to_id=#{userId})
            group BY conversation_id
        ) as m
    </select>

    <!-- //查询某个会话所包含的私信列表(支持分页 -->
    <!-- List<Message> selectLetters(String conversationId,int offset,int limit); -->
    <select id="selectLetters" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where status !=2
        and from_id != 1
        and conversation_id=#{conversationId}
        order by id desc
        limit #{offset},#{limit}
    </select>

    <!-- //查询某个会话所包含的私信数量 -->
    <!-- int selectLetterCount(String conversationId); -->
    <select id="selectLetterCount" resultType="int">
        select count(id)
        from message
        where status!=2
        and from_id!=1
        and conversation_id=#{conversationId}
    </select>

    <!-- //查询未读的私信数量 -->
    <!-- int selectLetterUnreadCount(int userId,String conversationId); -->
    <select id="selectLetterUnreadCount" resultType="int">
        select count(id)
        from message
        where status=0
        and from_id!=1
        and to_id=#{userId}
        <if test="conversationId!=null">
            and conversation_id=#{conversationId}
        </if>
    </select>


    <!-- int insertMessage(Message message); -->
    <insert id="insertMessage" parameterType="Message">
        insert into message(<include refid="insertFields"></include>)
        values(#{fromId},#{toId},#{conversationId},#{content},#{status},#{createTime})
    </insert>

    <!-- int updateStatus(List<Integer> ids,int status); -->
    <update id="updateStatus" >
        update message set status=#{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>


    <!-- Message selectLatestNotice(int userId,String topic); -->
    <select id="selectLatestNotice" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where id in(
            select max(id) from message
            where status!=2
            and conversation_id=#{topic}
            and from_id=1
            and to_id=#{userId}
        )
    </select>

    <!-- int selectNoticeUnreadCount(int userId,String topic); -->
    <select id="selectNoticeUnreadCount" resultType="int">
        select count(id) from message
        where status=0
        and from_id=1
        and to_id=#{userId}
        <if test="topic!=null">
            and conversation_id=#{topic}
        </if>
    </select>

    <!-- int selectNoticeCount(int userId,String topic); -->
    <select id="selectNoticeCount" resultType="int">
        select count(id) from message
        where status!=2
        and conversation_id=#{topic}
        and from_id=1
        and to_id=#{userId}
    </select>

    <!-- //查询某个主题下的所有通知 -->
    <!-- List<Message> selectNotices(int userId,String topic,int offset,int limit); -->
    <select id="selectNotices" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where status!=2
        and from_id=1
        and to_id=#{userId}
        and conversation_id=#{topic}
        order by create_time desc
        limit #{offset}, #{limit}
    </select>

</mapper>